[{"content":"","externalUrl":null,"permalink":"/","section":"","summary":"","title":"","type":"page"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/backends/","section":"Backends","summary":"","title":"Backends","type":"backends"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","externalUrl":null,"permalink":"/databases/","section":"Databases","summary":"","title":"Databases","type":"databases"},{"content":"","externalUrl":null,"permalink":"/frontends/","section":"Frontends","summary":"","title":"Frontends","type":"frontends"},{"content":"","externalUrl":null,"permalink":"/ops/","section":"Ops","summary":"","title":"Ops","type":"ops"},{"content":"","externalUrl":null,"permalink":"/others/","section":"Others","summary":"","title":"Others","type":"others"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","externalUrl":null,"permalink":"/threes/","section":"Threes","summary":"","title":"Threes","type":"threes"},{"content":" Hugo 安装 # MacOS 安装 # 在 MacOS 上，推荐使用包管理器 Homebrew 进行安装\nbrew install hugo 查看安装是否成功\nhugo version Windows 和 Linux 安装 # 在 Windows 和 Linux 上，推荐使用预编译二进制文件安装Hugo。\n下载地址：https://github.com/gohugoio/hugo/tags\n根据操作系统和架构下载对应的版本 下载后，解压缩二进制文件到目标目录 添加目标目录到环境变量 PATH 中 验证文件的执行权限 新建本地项目 # 使用 hugo 命令生成项目 # hugo new site Blog 执行上面的命令，会在当前所在目录下，生成一个名为 Blog 的项目\n项目文件说明 # archetypes：存放内容模板文件，支持通过hugo new 命令生成预设格式的Markdown文档。优先级：项目目录模板 \u0026gt; 主题模板‌。\nassets：存储需要预处理的静态资源（SCSS/JS），Hugo Pipes会编译后输出到resources/‌。\ncontent：存放所有Markdown格式的内容文件，子目录层级自动映射为网站URL结构。支持通过Front Matter设置内容类型‌。\ndata：存放结构化数据文件（JSON/XML），可通过.Site.Data调用‌。\ni18n：多语言配置文件，支持国际化字符串映射‌。\nlayouts：包含HTML模板文件，控制页面渲染逻辑：\n​\t├─ _default/（基础模板） ​\t├─ partials/（可复用组件）‌ ​\t└─ 主题模板继承机制：项目模板 \u0026gt; 主题模板‌\nstatic：直接复制到发布目录的原始文件（如图片/PDF），不经过编译处理‌。\nthemes：主题存放目录，可通过git submodule或直接克隆方式安装‌。\nresources：自动生成的编译缓存文件，包含优化后的CSS/JS和图片资源‌。\nconfig：多环境配置文件目录（config.toml/ 、config/production.toml），支持TOML/YAML格式‌。\npublic：默认生成路径，存放编译后的完整静态网站文件‌。\nhugo.toml：Hugo 静态网站生成器的核心配置文件，包括定义网站元数据等功能。\n主题配置 # 主题下载 # Hugo 官网有许多主题可供选择，官网主题地址：https://themes.gohugo.io/\n下面以blowfish主题为例进行演示，blowfish主题地址：https://themes.gohugo.io/themes/blowfish/\n主题的安装有以下几种方式，具体说明参见主题使用文档：https://blowfish.page/docs/installation/#install-using-hugo\n方式一：可以直接在主题地址页面进行下载，然后将下载的主题文件解压后，移动到 hugo 项目的themes/目录下。 方式二：使用 git 安装主题。 方式三：使用 hugo 安装。 下面以 git 安装主题的方式进行演示：\n进入到 hugo项目的根目录下，初始化本地库 git init 添加 Blowfish 作为子模块 git submodule add -b main https://github.com/nunocoracao/blowfish.git themes/blowfish 设置主题 # 在 hugo 项目的根目录下，删除hugo.toml，然后将主题文件下的/config/_default中所有的*.toml文件复制到 hugo 项目的config/_default/文件夹中。\n复制上图中主题文件夹下的文件到你的hugo项目中。\n上面是使用 git 来安装 Blowfish，所以需要修改hugo.toml文件，添加theme = \u0026quot;blowfish\u0026quot;到文件顶部。\n主题更新 # 因为上面是使用 git 来安装主题的，所以只需执行以下命令，主题的最新版本就会下载到您的本地存储库中\ngit submodule update --remote --merge 子模块更新后，再重新构建项目即可。\n项目配置 # 下面对部分配置进行说明，具体配置参见主题的使用文档：https://blowfish.page/zh-cn/docs/configuration\n语言设置 # 如果要配置多语言，则需要为网站上的每种语言创建一个语言配置文件。\n默认情况下，Blowfish 包含了英语的配置文件config/_default/languages.en.toml。\n如果想要设置中文和英语两种语言，则按以下步骤操作即可。\n创建文件config/_default/languages.zh-cn.toml 文件内容可以复制languages.en.toml，然后修改即可。下面展示部分修改的配置。\ndisabled = false languageCode = \u0026#34;zh-cn\u0026#34; # 语言代码。 languageName = \u0026#34;Chinese\u0026#34; # 语言名称。 weight = 1 # 权重决定了在构建多语言时的语言顺序。 title = \u0026#34;sun_blog\u0026#34; # 网站的标题。它将在网站头部和底部进行展示。 [params] displayName = \u0026#34;简体中文\u0026#34; # 语言在网站中的展示名。 isoCode = \u0026#34;zh-CN\u0026#34; # 用于 HTML 元数据的 ISO 语言代码。 rtl = false # 用于指定是否是 RTL 语言。设置为 true 则网站会从右向左重排内容。 dateFormat = \u0026#34;2006年01月02日\u0026#34; # 日期格式。 设置默认语言为中文 修改hugo.toml，设置默认语言为中文\ndefaultContentLanguage = \u0026#34;zh-cn\u0026#34; 项目部署 # 常规部署 # 创建Github仓库 # 修改BaseUrl # 修改 hugo 项目中的 hugo.toml，设置baseURL\nbaseURL = \u0026#34;https://SunHy98.github.io\u0026#34; 项目打包 # 运行 hugo -D 进行项目构建，会在项目的根目录下生成public文件夹，这就是最终的目标文件。\n项目推送到Github # 进入public文件夹下，按照以下命令，操作即可。\n初始化本地库 git init 提交本地工作区文件到本地库 git add . git commit -m \u0026#34;提交说明\u0026#34; 修改本地分支名称 在Git中，默认的主分支名称是master，但在最近的版本控制实践中，许多项目开始使用main作为默认的主分支名称。可以使用下面的命令，将本地的master分支更名为main分支。\ngit branch -M main 关联远程仓库 git remote add origin git@github.com:SunHy98/SunHy98.github.io.git 推送本地项目到远程仓库 git push -u origin main 访问博客网站 # 进入仓库的页面，选择Settings 选择Pages，可以在这里看到站点部署的网址\n部署可能需要等待一段时间，才能看到该网址。\n访问博客 自动部署 # GitHub 允许你使用 Actions 在 GitHub Pages 上托管静态网站。如果想要启用此功能，需要你在代码库中启用 Pages 并创建一个新的 Actions 工作流，以此来构建和部署你的网站。\n部署流程参见主题说明文档：https://blowfish.page/zh-cn/docs/hosting-deployment/#github-pages\n创建工作流配置文件 # 在 Hugo 项目的根目录下创建文件.github/workflows/gh-pages.yml\n# .github/workflows/gh-pages.yml name: Blog on: push: branches: - main jobs: build-deploy: runs-on: ubuntu-20.04 concurrency: group: ${{ github.workflow }}-${{ github.ref }} steps: - name: Checkout uses: actions/checkout@v3 with: submodules: true fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#34;latest\u0026#34; - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 if: ${{ github.ref == \u0026#39;refs/heads/main\u0026#39; }} with: github_token: ${{ secrets.GITHUB_TOKEN }} publish_branch: gh-pages publish_dir: ./public 在上面的配置文件中，需要填写github_token\n生成token\nSetttings -\u0026gt; Developer Settings -\u0026gt; Personal access tokens -\u0026gt; Tokens（classic）\n设置token\n可以直接将token填写到上面的配置文件，但为了安全，可以作为环境变量，配置在GitHub上\n进入仓库页面 -\u0026gt; Setttings -\u0026gt; Secrets and variables -\u0026gt; Actions -\u0026gt; new repository secret\n将上面的secret Name设置到工作流文件中\njobs: build-deploy: runs-on: ubuntu-20.04 concurrency: group: ${{ github.workflow }}-${{ github.ref }} steps: - name: Checkout uses: actions/checkout@v3 with: submodules: true fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#34;latest\u0026#34; - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 if: ${{ github.ref == \u0026#39;refs/heads/main\u0026#39; }} with: github_token: ${{ secrets.deploy_token }} publish_branch: gh-pages publish_dir: ./public 创建.gitignore # 由于自动部署，是交给GitHub去完成，所以不需要上传public、resources等构建的输出目录和文件。\npublic resources .hugo_build.lock 推送到远程库 # 进入到 hugo 项目的根目录，初始化本地库\n之前在下载主题的时候，已经初始化过了，这里就可以跳过了\ngit init 提交本地工作区文件到本地库 git add . git commit -m \u0026#34;提交说明\u0026#34; 修改本地分支名称 在Git中，默认的主分支名称是master，但在最近的版本控制实践中，许多项目开始使用main作为默认的主分支名称。可以使用下面的命令，将本地的master分支更名为main分支。\ngit branch -M main 关联远程仓库 git remote add origin git@github.com:SunHy98/SunHy98.github.io.git 推送本地项目到远程仓库 注意：由于之前使用了常规部署方式，导致当前远程库的版本已经和本地不一致。可以尝试新建一个GitHub仓库进行提交，也可以使用强制推送命令。如果没有进行过常规部署，就不会有问题。\n现在的 Hugo 项目中，有两个 .git 文件，可以先把public里面的 .git 删除\n然后尝试将本地库的提交推送到远程仓库中\ngit push -u origin main 由于之前的常规部署已经对远程库进行了修改，所以这里无法直接推送。下面使用强制推送。\ngit push -f -u origin main 将工作流配置文件推送到GitHub，GitHub会自动运行工作流。\n我们需要在代码仓库的 Settings \u0026gt; Pages ，将分支改为 gh-pages 。\n测试自动部署 # 我们将这篇博客放到 hugo 项目的 content 目录中\n然后将文件提交到远程库，会自动进行部署\n部署完成后，可以访问到该博客，但是由于主题的很多功能没有配置，暂时只能使用 url 来访问该博客\n默认的访问路径为：博客的网址 + /文件路径\n","externalUrl":null,"permalink":"/blog/","section":"","summary":"","title":"使用 Hugo + Github 搭建个人博客","type":"page"},{"content":"本节包含了我所有的当前项目。\n","externalUrl":null,"permalink":"/projects/","section":"项目","summary":"","title":"项目","type":"projects"}]